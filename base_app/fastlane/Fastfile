platform :ios do
  desc "Runs tests and distributes the iOS app to Firebase App Distribution"
  lane :beta_ios do |options|
    # 1. 依存関係のインストール (CocoaPodsなど)
    # cocoapods(clean: true) # 必要であれば
    UI.message("APP_STORE_CONNECT_API_KEY present: #{!ENV['APP_STORE_CONNECT_API_KEY'].nil?}")
    
    api_key = app_store_connect_api_key(
      key_id: ENV['FASTLANE_ITC_KEY_ID'],
      issuer_id: ENV['FASTLANE_ITC_ISSUER_ID'],
      key_filepath: ENV['FASTLANE_API_KEY_FILE']
    )

    # 2. コード署名のセットアップ
    match(
      type: "development",
      api_key: api_key,
      clone_branch_directly: true
    ) # テストビルド用
    # match(type: "appstore") # または App Store Connect API Key を使った自動署名 (推奨)

    # 3. Flutter iOS ビルド
    # flutter(
    #   build_ios_scheme: "Runner", # Xcode Scheme名
    #   build_ios_configuration: "Debug", # または Debug
    #   build_ios_build_number: ENV["BUILD_NUMBER"] || Time.now.to_i.to_s,
    #   build_ios_build_method: "development", # "app-store", "development", "ad-hoc"
    #   build_ios_export_path: "./build/ios"
    # )
   # 3. Flutter iOS ビルド
    # flutterアクションではなく、shアクションでflutter build ipaコマンドを直接呼び出す
    
    # IPAの出力パスを定義 (Firebase App Distributionに渡すため)
    ipa_output_path = "./build/ios/Runner.ipa" # デフォルトの出力名
    
    # Xcode SchemeとConfigurationに基づいてビルド
    # ここでは "Runner" Schemeと "Debug" Flavor（ビルド設定）を使用していますが、
    # 必要に応じて "Release" や他のFlavorに変更してください。
    # 例: --release または --flavor Production など
    sh "flutter build ipa --debug --export-method development",
       env: {
         "FASTLANE_ITC_KEY_ID" => ENV["FASTLANE_ITC_KEY_ID"],
         "FASTLANE_ITC_ISSUER_ID" => ENV["FASTLANE_ITC_ISSUER_ID"],
         "FASTLANE_API_KEY_FILE" => ENV["FASTLANE_API_KEY_FILE"]
       }

    # 4. Firebase App Distribution へのアップロード
    firebase_app_distribution(
      app: "jp.morson.example.baseApp", # Firebase Consoleから取得
      firebase_cli_path: "/usr/local/bin/firebase", # CI環境のパスに合わせる
      groups: "testers_ios", # 配布先のグループ名
      release_notes: options[:release_notes] || "Latest iOS build from CI/CD.",
      debug: false
    )

    # Slackなどへの通知
    # slack(message: "iOS build pushed to Firebase App Distribution for testing!")
  end
end

platform :android do
  desc "Runs tests and distributes the Android app to Firebase App Distribution"
  lane :beta_android do |options|
    # 1. Flutter Android ビルド
    flutter(
      # flutterコマンドに渡す引数を `args` 配列として指定します
      args: [
        "build",
        "apk", # または "appbundle"
        "--release", # build_android_build_mode に相当
        "--target-platform=android-arm64", # build_android_target_platform に相当
        "--split-per-abi", # build_android_split_per_abi に相当
        "--build-number=#{ENV["BUILD_NUMBER"] || Time.now.to_i.to_s}",
        # "--output=./build/android", # build_android_export_path に相当

        # 署名情報
        # これらの引数はflutter build apk/appbundleに直接渡すものです。
        # Fastlaneが環境変数から取得してくれます。
        "--build-name=#{Time.now.strftime("%Y.%m.%d")}#{(ENV["BUILD_NUMBER"] || Time.now.to_i.to_s).to_i}",
        # "--split-per-abi",
        # "--signing-keystore=#{ENV["KEYSTORE_PATH"]}",
        # "--signing-store-password=#{ENV["KEYSTORE_PASSWORD"]}",
        # "--signing-key-alias=#{ENV["KEY_ALIAS"]}",
        # "--signing-key-password=#{ENV["KEY_PASSWORD"]}"
      ]
      # `capture_stdout` はデフォルトでtrueなので省略してもOK
      # capture_stdout: true
    )

    # 2. Firebase App Distribution へのアップロード
    firebase_app_distribution(
      app: "com.example.base_app", # Firebase Consoleから取得
      firebase_cli_path: "/usr/local/bin/firebase", # CI環境のパスに合わせる
      groups: "testers_android", # 配布先のグループ名
      release_notes: options[:release_notes] || "Latest Android build from CI/CD.",
      debug: false
    )

    # Slackなどへの通知
    # slack(message: "Android build pushed to Firebase App Distribution for testing!")
  end
end